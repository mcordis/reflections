What happens when you initialize a repository? Why do you need to do it?
    
     A git repository was created with the .git file. Git recognizes that I do not have any files committed. We need to initialize a repository so that we have version control for our files and can revert back changes just in case bugs were introduced.

How is the staging area different from the working directory and the repository? What value do you think it offers?

    The staging area is a place for you to place related changes that are ready to be committed. The files in the staging area can be removed or committed. Once committed you will have versioning to reference or revert back to using the same file name. A working directory does not create versioning automatically once you choose to save your file unless you store copies with different file names.

How can you use the staging area to make sure you have one commit per logical change?
    
    Git status allows you to see the files that you have modified from the original version. If you made changes to multiple files you can see all of the files waiting to be committed. You have the choice to commit the each file separately or all together.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

     When you need to make isolated changes that you do not want to impact the master branch version or you have different versions that are language specific.

How do the diagrams help you visualize the branch structure?

     Understand the parent relationships for each commit in a branch and which commits are not reachable.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

     The commits from branches are merged together so that you have one final branch with all changes. The diagram visually represents how the merge works and which commits are in the final branch.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

     Pros, Git is able to identify changes that were made and can merge them into 1 file. Git can also identify is two individuals made changes to the same code and flag the conflicts before merging. Cons of manually having to merge is that you won’t be able to quickly identify if someone has committed changes that conflict with your changes. You would also have to manually go through the file to identify the conflicts where Git identifies the conflicts automatically for your to resolve.
